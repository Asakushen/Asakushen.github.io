<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>哔哩哔哩助手</title>
      <link href="posts/c079e252/"/>
      <url>posts/c079e252/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Bilibili助手"><a href="#Bilibili助手" class="headerlink" title="Bilibili助手"></a>Bilibili助手</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>哔哩哔哩(B站)自动完成每日任务， 投币，点赞，直播签到，自动兑换银瓜子为硬币，自动送出即将过期礼物，漫画App签到，大会员领取B币卷等。每天获得65点经验，助你快速升级到Lv6。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li><input checked="" disabled="" type="checkbox"> 自动获取经验(投币、点赞、分享视频)</li><li><input checked="" disabled="" type="checkbox"> 直播辅助(直播签到，自动送出即将过期的礼物)</li><li><input checked="" disabled="" type="checkbox"> 自动兑换银瓜子为硬币</li><li><input checked="" disabled="" type="checkbox"> 自动领取年度大会员每月权益(每月1号领取B币劵、权益礼包)</li><li><input checked="" disabled="" type="checkbox"> 月底自动用B币卷给自己充电(每月28号)</li><li><input checked="" disabled="" type="checkbox"> 月底自动用B币卷兑换金瓜子(每月28号)</li><li><input checked="" disabled="" type="checkbox"> 漫画辅助脚本(漫画APP签到)</li><li><input checked="" disabled="" type="checkbox"> 支持功能自定义(自定义投币数量，银瓜子兑换硬币开关等)</li><li><input checked="" disabled="" type="checkbox"> 账户失效提醒(发送到你的微信或者钉钉提醒、邮箱提醒)</li><li><input checked="" disabled="" type="checkbox"> 支持多种方式推送运行结果(钉钉、微信)本文介绍微信推送</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>本项目是<a href="https://github.com/srcrs">@srcrs</a>在GitHub上的开源项目（原作者也有使用手册，本篇博客也大量引用参考原作者的使用手册，但面向纯新手，对于GitHub也不知道的用户也能按照本文做出自己的助手。）所以需要先注册GitHub账号，<a href="https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home">点击此处前往注册</a></p><p><img src="https://p.ananas.chaoxing.com/star3/origin/dd527b85290b4deced3bed71dfd686d3.png?rw=1245&rh=951&_fileSize=52648&_orientation=1" alt="注册.png"><br>按照图片进行注册，稍后会收到邮箱确认后登录即可，不需要额外操作。</p><h3 id="2-fork"><a href="#2-fork" class="headerlink" title="2.fork"></a>2.fork</h3><p>先点击项目地址<a href="https://github.com/srcrs/BilibiliTask">BilibiliTask</a><br>进去后点击右上角fork<img src="https://p.ananas.chaoxing.com/star3/origin/712eee063e18bad3be8c8a89a5b2c20a.png?rw=1773&rh=798&_fileSize=138835&_orientation=1" alt="FORK.png"><br>稍作等待会进入到跟刚才差不多的界面 但左上角是你的名字 就是图片中的蓝色打码区域<br><img src="https://p.ananas.chaoxing.com/star3/origin/c07388725f1fa567bcc506368bfcf250.png?rw=1865&rh=932&_fileSize=155748&_orientation=1" alt="fork后.png"></p><h3 id="3-设置参数"><a href="#3-设置参数" class="headerlink" title="3.设置参数"></a>3.设置参数</h3><h4 id="抓取参数"><a href="#抓取参数" class="headerlink" title="抓取参数"></a>抓取参数</h4><p>电脑登陆哔哩哔哩后再任意界面抓包获得cookie中的BILI_JCT  DEDEUSERID  SESSDATA这三个参数，具体操作方法如下：</p><p>再b站任意界面按按F12→Application→Cookies具体的参考下图<img src="https://p.ananas.chaoxing.com/star3/origin/503a85e81468499c855b0940017df6e7.png?rw=704&rh=754&_fileSize=74001&_orientation=1" alt="抓包.png"></p><p>其中name就是参数名，后面的value就是我们需要的参数值，挨个复制备用即可。</p><h4 id="填写参数"><a href="#填写参数" class="headerlink" title="填写参数"></a>填写参数</h4><p>点击蓝框中的setting<img src="https://p.ananas.chaoxing.com/star3/origin/18a968bc7618c6b26ed9980bda5e8641.png?rw=1837&rh=681&_fileSize=118176&_orientation=1" alt="setting.png"></p><p>再点击Srcrets进去后创建参数</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/ef3d15f1722a8e01682220526d9e410b.png?rw=1524&rh=788&_fileSize=67373&_orientation=1" alt="secr.png"></p><p>黑色框框你们应该是没有的，这是我填完参数后才出现的，按照图片中顺序点击即可。</p><p>分别创建三个secrets</p><p>  <img src="https://p.ananas.chaoxing.com/star3/origin/6fc14c2d18089b40566e884a6cc759f7.jpg?rw=720&rh=648&_fileSize=31712&_orientation=1" alt="参数.jpg"></p><p>按照作者给的名字命名，按照你刚刚抓到的的值填入即可。</p><h3 id="4-开启actions"><a href="#4-开启actions" class="headerlink" title="4.开启actions"></a>4.开启actions</h3><p>点击actions<img src="https://p.ananas.chaoxing.com/star3/origin/82c6eac9f1a419f8ed5456bf282d2329.png?rw=1456&rh=270&_fileSize=29456&_orientation=1" alt="act.png"></p><p>然后再点击绿色的长条按钮即可，由于我这边已经开启了所以没配图。</p><h3 id="5-进行一次push操作"><a href="#5-进行一次push操作" class="headerlink" title="5.进行一次push操作"></a>5.进行一次push操作</h3><p>默认push操作会触发工作流运行。打开README.md，将里面的 😄 删除一个即可</p><p>这里引用作者文档里的gif</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/d186b819c0fdf8efb884db105ccb0b64.gif?rw=1303&rh=717&_fileSize=591689&_orientation=1" alt="进行一次push操作.gif">查看actions，显示对勾就说明运行成功了。以后会在每天的<code>10：30</code>执行，自动完成每日任务。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/febd0251f98d4d8606a15d317429839d.gif?rw=1262&rh=565&_fileSize=779243&_orientation=1" alt="运行结果.gif"></p><h2 id="进阶教程（未更新）"><a href="#进阶教程（未更新）" class="headerlink" title="进阶教程（未更新）"></a>进阶教程（未更新）</h2><h3 id="1-更改配置文件"><a href="#1-更改配置文件" class="headerlink" title="1.更改配置文件"></a>1.更改配置文件</h3><h3 id="2-将运行结果推送到微信"><a href="#2-将运行结果推送到微信" class="headerlink" title="2.将运行结果推送到微信"></a>2.将运行结果推送到微信</h3><h3 id="3-自定义程序运行时间"><a href="#3-自定义程序运行时间" class="headerlink" title="3.自定义程序运行时间"></a>3.自定义程序运行时间</h3><p>未完待续…….<br>（本文部分图文来自于原作者文档，图片除特别声明外均原创）</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 哔哩哔哩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习（一）</title>
      <link href="posts/8bf9a11e/"/>
      <url>posts/8bf9a11e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C语言学习笔记"><a href="#C语言学习笔记" class="headerlink" title="C语言学习笔记"></a>C语言学习笔记</h1><p>C语言也学习了一个多月了，从最开始的什么都不会到现在能简单写一些简单代码，感觉收获很多，也来总结一下最近遇到的一些题目吧。</p><h2 id="数组的删除"><a href="#数组的删除" class="headerlink" title="数组的删除"></a>数组的删除</h2><p>[问题描述]<br>有5个整型数据存储在数组中，再输入一个数值key，删除数组中第1个等于key的元素，并将剩余的4个数据输出。如果key不是数组中的元素，则显示not found。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>本题中查找第一个重复元素并删除它，显然我们不能直接删除数组中的某个元素，但可以移动它，把目标移动到数组末尾，最后的输出不输出它即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>],k,i,j,temp,index=<span class="number">0</span>;<span class="comment">//temp为中间变量，index为初始值赋为0</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==k)<span class="comment">//判断k值与数组中是否有重复</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;<span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];<span class="comment">//依次往后移动一个位置</span></span><br><span class="line">index=<span class="number">-1</span>;<span class="comment">//改变初始值用于判断是否进入该循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出第一个循环，因为只删除第一个重复的数值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(index==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not found&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)<span class="comment">//最多只输出到a[3]</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波拉契数列（数组）"><a href="#斐波拉契数列（数组）" class="headerlink" title="斐波拉契数列（数组）"></a>斐波拉契数列（数组）</h2><p>[问题描述]<br>如果1对兔子第三月开始每月能生一对小兔子，而每对小兔子在它出生后的第3个月开始，又能生1对小兔子，假定在不发生死亡的情况下，n个月后有多少对兔子？ n值通过键盘输入。<br>‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪ [输入输出示例]<br>  输出在一行，每个数字占6位宽度。</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>根据问题描述可知斐波拉契数列a1=a2=1，a3=2 a4=3 a5=5 a6=8……<br>经观察易得，从第三项起，每一项是前两项之和，即a3=a2+a1，a4=a3+a2，a5=a4+a3，根据这个规律即可用数组写出本题。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line">a[<span class="number">0</span>]=a[<span class="number">1</span>]=<span class="number">1</span>; <span class="comment">//a1=a2=1</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;n; i++) <span class="comment">//从第三项起开始进入循环，直到i=n-1时退出循环</span></span><br><span class="line">&#123;</span><br><span class="line">a[i]=a[i<span class="number">-2</span>]+a[i<span class="number">-1</span>]; <span class="comment">//每一项都是前两项之和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//从第一项开始进入循环</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%6d &quot;</span>,a[i]);<span class="comment">//打印所有项</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找数组的最大值与最小值"><a href="#查找数组的最大值与最小值" class="headerlink" title="查找数组的最大值与最小值"></a>查找数组的最大值与最小值</h2><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>想要找出数组中最大值最小值我们可以先将max,min赋值成任意数组内一个数，然后进入循环开始比较每一项，如果任意一项大于等于max，则重新将此时的数赋值给max，min同理直到比较完数组最后一个数时退出循环。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a[<span class="number">10</span>],i,max,min;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); <span class="comment">//输入数字存入数组</span></span><br><span class="line"> max=min=a[<span class="number">0</span>]; <span class="comment">//将数组第一个数赋值给max和min</span></span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) <span class="comment">//进入循环逐个比较与max,min大小关系</span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(max&lt;=a[i])</span><br><span class="line"> max=a[i]; <span class="comment">//如果某一项大于等于max，则重新赋值给max</span></span><br><span class="line"> <span class="keyword">if</span>(min&gt;=a[i])</span><br><span class="line"> min=a[i];<span class="comment">//如果某一项小于等于min,重新赋值</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max=%d\nmin=%d&quot;</span>,max,min)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h2><p>[问题描述]</p><p>模拟这个游戏。有n个人围成一圈，从第一个人开始沿顺时针方向报数（从1到3报数），   凡报到3的人退出圈子，问最后留下的是原来第几号的那个人?</p><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>本题需要一个”计数”变量来计数，我们考虑用计数到3时把此时的a[i]赋值成0，下次计数时跳过0，不断循环直到数组中只有一个非零数时，该数的下标就是我们需要的。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">100</span>],i,count=<span class="number">0</span>,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">x=n;<span class="comment">//x判断最终数组内还有几个非零元素</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=i;<span class="comment">//让数组按照123456排好</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="number">0</span>)<span class="comment">//跳过0</span></span><br><span class="line">count++;<span class="comment">//计数</span></span><br><span class="line"><span class="keyword">if</span>(count==<span class="number">3</span>) </span><br><span class="line">&#123;</span><br><span class="line">a[i]=<span class="number">0</span>;<span class="comment">//每次到3时就“删除”这个数组</span></span><br><span class="line">count=<span class="number">0</span>;<span class="comment">//计数归零</span></span><br><span class="line">x--;<span class="comment">//数组非零元素-1，最终循环到x=1时结束。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="选择排序法（升序）"><a href="#选择排序法（升序）" class="headerlink" title="选择排序法（升序）"></a>选择排序法（升序）</h2><p>交换排序发顾名思义就是不断交换从而排序</p><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><p>若干个数，若想排序我们可以只考虑相邻两个数的大小，如果所有相邻的俩个数都是小数在前大数在后那么整个数组都是按照升序排列了。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>],i,j,temp;<span class="comment">//temp为中间值，目的是交换两个数组</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j])<span class="comment">//前后两个数进行比较，如果后面的数大就交换他们</span></span><br><span class="line">&#123;</span><br><span class="line">temp=a[j];</span><br><span class="line">a[j]=a[i];</span><br><span class="line">a[i]=temp;<span class="comment">//用temp值做中间值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h2><p><del>待补充</del></p><h2 id="快速排序法"><a href="#快速排序法" class="headerlink" title="快速排序法"></a>快速排序法</h2><p><del>待补充</del></p><h2 id="杨辉三角（二维数组）"><a href="#杨辉三角（二维数组）" class="headerlink" title="杨辉三角（二维数组）"></a>杨辉三角（二维数组）</h2><p>杨辉三角在我们高中时已经学习过，我们都知道它是个类金字塔型，但为了简单化我们将其变形为等腰直角三角形，此时的图形如下图所示。<br><img src="https://p.ananas.chaoxing.com/star3/origin/5f47ccbf9294edc01cc6267fcdc77ebb.jpg?rw=472&rh=222&_fileSize=9194&_orientation=1" alt="杨辉三角"></p><h4 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h4><p>观察可知，这个等腰直角三角形的竖直的腰和斜边都是1，剩下的数总是它上方的及上方左边数之和，根据次规律考虑使用二维数组来进行编程。</p><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>][<span class="number">100</span>],n,i,j;<span class="comment">//n为键盘输入，限定杨辉三角的腰长</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)<span class="comment">//小于等于是因为最后一行和第一竖列个数相等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j||j==<span class="number">0</span>)<span class="comment">//判断竖直的腰和斜边</span></span><br><span class="line">a[i][j]=<span class="number">1</span>;<span class="comment">//赋值为1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">a[i][j]=a[i<span class="number">-1</span>][j]+a[i<span class="number">-1</span>][j<span class="number">-1</span>];<span class="comment">//其余的为上方数加上方左边数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>,a[i][j]);<span class="comment">//打印</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><p>小学我们一定背过九九乘法表，我们用已学知识将其打印出来也是件非常有意思的事情。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/a813947249872fa64d035a94879c6012.jpg?rw=650&rh=215&_fileSize=27606&_orientation=1" alt="九九乘法表"></p><h4 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h4><p>观察上图可知竖列从1X1一直到1x9，横列从1xa一直到aXa.</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">9</span>],i,j,s,n; <span class="comment">//s为a*b的和，n为最高输入到n*n结束</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//从1开始，因为是1*a</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">&#123;</span><br><span class="line">s=i*j;<span class="comment">//求出和方便后面输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d&quot;</span>,j,i,s);</span><br><span class="line"><span class="keyword">if</span>(j!=i)<span class="comment">//每一行最后一个不需要空格</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i!=n)<span class="comment">//最后一行下面没有换行。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="顺序查找法"><a href="#顺序查找法" class="headerlink" title="顺序查找法"></a>顺序查找法</h2><p> 在含有10个数的数列{11,22,5,16,8,3,19,20,23,52}中查找key值，若找到key则输出其在数组中对应的下标，否则输出not found</p><h4 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h4><p>顺序查找顾名思义就是按照顺序挨个查找数组中的每一个元素，直到找到时输出即可，若找完整个数组还没找到就是not found。</p><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">5</span>,<span class="number">16</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">23</span>,<span class="number">52</span>&#125;,i,k,index=<span class="number">-1</span>; <span class="comment">//k为需要查找的值，index为初始值，方便后面判断</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==k)<span class="comment">//判断数组每个元素与k值是否相等</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);<span class="comment">//判断成立输出数组下标</span></span><br><span class="line">index=<span class="number">0</span>;<span class="comment">//改变初始值，代表判断成立已经找到</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(index!=<span class="number">0</span>)<span class="comment">//仅当上方判断语句从未成立时，代表数组中不存在要查找的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not found&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分（折半）查找法"><a href="#二分（折半）查找法" class="headerlink" title="二分（折半）查找法"></a>二分（折半）查找法</h2><p>接着我们学习了效率更高的二分（折半）查找法，假如有1，3，5，7，11，13，17，19，23，29，31，37，41，43，47，53，56这么一组数，我们尝试使用该方法查找。注意，二分查找只能用于<strong>有序</strong>的数组进行查找。这里用升序数组举例，降序也是一个道理。</p><p>二分查找原理用文字很难讲清楚，我引用网络上的一张动图方便理解，也可以对比一下顺序查找和二分查找效率。</p><p><img src="https://p.ananas.chaoxing.com/star3/origin/b06ee44c53e1fb5ae1ec548e89b37668.gif?rw=600&rh=400&_fileSize=187800&_orientation=1" alt="二分查找"></p><p>​                                                                                                <em>图片来源于水印，仅用于学习交流，不用于商业用途，如侵权请联系我删除。</em></p><h4 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h4><p>按照动图为例查找37；刚开始不确定37在哪，所以整个数组都是查找区，low=0，high=16，mid=8；因为8对应的a[8]=23&lt;37,所以37在a[8]右边，此时low=mid+1=9，查找区由整个数组变为a[9]-a[16]；mid=12*（mid为整型）*，a[12]=41&gt;37;所以high变成了11；查找区也变成了a[9]-a[11];mid=10；a[10]=31&lt;37，low=11，mid=11,a[11]=37,，于是我们就找到了查找数37.处于数组11号。</p><h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">17</span>]= &#123;<span class="number">1</span>，<span class="number">3</span>，<span class="number">5</span>，<span class="number">7</span>，<span class="number">11</span>，<span class="number">13</span>，<span class="number">17</span>，<span class="number">19</span>，<span class="number">23</span>，<span class="number">29</span>，<span class="number">31</span>，<span class="number">37</span>，<span class="number">41</span>，<span class="number">43</span>，<span class="number">47</span>，<span class="number">53</span>，<span class="number">56</span>&#125;,k,low,mid,high,index;<span class="comment">//k值为需要查找的值，low,mid,high分别为查找区最小,中间,最大下标。index为初始值方面后面判断是否查找到。</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);<span class="comment">//输入需要查找的数</span></span><br><span class="line">low = <span class="number">0</span>;</span><br><span class="line">high = <span class="number">15</span>;<span class="comment">//刚开始是查找区为整个数组，所以最小和最大为0与1</span></span><br><span class="line">index = <span class="number">-1</span>;<span class="comment">//初始值赋值为-1防止与下标冲突</span></span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)<span class="comment">//当low个high值错位时，退出循环（此时查找区为空，要么找到了要么不存在）</span></span><br><span class="line">&#123;</span><br><span class="line">mid=(low+high) / <span class="number">2</span>;<span class="comment">//计算中间下标</span></span><br><span class="line"><span class="keyword">if</span> (a[mid]==k)<span class="comment">//如果查找区的中间的那个数等于k说明已经找到</span></span><br><span class="line">&#123;</span><br><span class="line">index = mid;<span class="comment">//初始值赋值成找到的那个数组下标</span></span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[mid]&gt;k)<span class="comment">//如果查找区中间值的数大于查找的数，说明查找数在中间值左侧，考虑缩小查找区进一步确定查找数位置</span></span><br><span class="line">high = mid - <span class="number">1</span>;<span class="comment">//缩小查找区</span></span><br><span class="line"><span class="keyword">if</span> (a[mid]&lt;k)<span class="comment">//如果查找区中间值的数小于查找的数，说明查找数在中间值右侧，考虑缩小查找区进一步确定查找数位置</span></span><br><span class="line">low = mid + <span class="number">1</span>;<span class="comment">//缩小查找区</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index!=<span class="number">-1</span>)<span class="comment">//如果初始值一直都为-1。说明上方判断语句不成立，说明待查找的数不在数组中，输出not found，如果不等于-1。，说明判断语句成立，此时index值就为数组中该查找数的下标 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,mid);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;not found&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><del>待补充：约瑟夫问题，数组的删除<br>未完待续……</del></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown教程</title>
      <link href="posts/31604/"/>
      <url>posts/31604/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><p>本博客网站所有内容均以Markdown编写。</p><blockquote><p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p></blockquote><p>所以非常受欢迎。<br>首先是是标题，标题用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 内容</span></span><br></pre></td></tr></table></figure><p>例如:</p><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><p>当然你最多可以输入6个#<br>例如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">###### 标题6</span></span><br></pre></td></tr></table></figure><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><hr><p>当然你会发现上面多了2个奇怪的框框，这个框框是代码框，这也很容易实现。只需要在不想输入代码的前后分别加上```，记得换行（回车）<br>就像这样</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```</span></span><br><span class="line"><span class="code">这句话上下分别都有</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>md也可以做出引用，在引用文前输入&gt;和空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这句话是引用</span></span><br></pre></td></tr></table></figure><blockquote><p>这句话是引用</p></blockquote><p>当然你可以在一个&gt;下方多加一个&gt;可以实现缩进。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是第一个引用</span></span><br><span class="line">&gt;&gt; 这是第二个引用</span><br></pre></td></tr></table></figure><blockquote><p>这是第一个引用</p><blockquote><p>这是第二个引用</p></blockquote></blockquote><hr><p>上方这个分割线只需要加三个减号即  -  即可 </p><h2 id="斜体-amp-加粗-amp-斜体加粗-amp-删除线"><a href="#斜体-amp-加粗-amp-斜体加粗-amp-删除线" class="headerlink" title="斜体&amp;加粗&amp;斜体加粗&amp;删除线"></a>斜体&amp;加粗&amp;斜体加粗&amp;删除线</h2><p>文字的<em>斜体</em>和<strong>加粗</strong>以及 <strong><em>斜体并加粗</em></strong> 只需要在文字前后分别加一个、二个和三个*</p><p><del>删除线</del>只需要加在文字前后加上两个~</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span>  <span class="strong">**加粗**</span>   <span class="strong">**<span class="emphasis">*斜体加粗<span class="strong">**<span class="emphasis">* ~~删除~~</span></span></span></span></span><br></pre></td></tr></table></figure><p><em>斜体</em> and <strong>加粗</strong> and   <strong><em>斜体加粗</em></strong>  and  <del>删除</del></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>md也可以实现超链接，比如<a href="http://2333.fit/">我的博客</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">点击[<span class="string">百度</span>](<span class="link">http://www.baidu.com</span>)跳转搜索</span><br></pre></td></tr></table></figure><p>点击<a href="http://www.baidu.com/">百度</a>跳转搜索</p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>md支持三种插入图片的方式，分别是相对路径，绝对路径，网络图片。<br>我主要说一下网络图片的插入方式，本地同理。<img src="https://p.ananas.chaoxing.com/star3/origin/d45be889b1992613e46e00cf4e68ecb3.png?rw=1754&rh=1240&_fileSize=1861300&_orientation=1" alt="img">    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string"> img</span>](<span class="link">https://i.loli.net/2021/01/17/ICA2BNxUuPV7vGf.png</span>))</span><br></pre></td></tr></table></figure><p>这里括号里的是图片的直链，推荐使用<a href="https://www.niupic.com/">牛图网</a>或<a href="https://sm.ms/">sm.ms</a>两个图床。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ol><li>有序排序</li><li>无序排序</li><li>就像这样</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一行</span><br><span class="line"><span class="bullet">2.</span> 第二行</span><br></pre></td></tr></table></figure><p>后面直接按回车就行。<br>还有一中无序排序</p><ul><li>这就是无序排序</li></ul><ul><li>就像这样</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> 这就是无序排序</span><br><span class="line"><span class="bullet">-</span> 就像这样</span><br></pre></td></tr></table></figure><p>这里+和-都可以，两种排序都可以缩进</p><h2 id="任务清单"><a href="#任务清单" class="headerlink" title="任务清单"></a>任务清单</h2><ul><li><input disabled="" type="checkbox"> 未完成</li><li><input checked="" disabled="" type="checkbox"> 已完成</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 未完成</span><br><span class="line"><span class="bullet">-</span> [x] 已完成</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
